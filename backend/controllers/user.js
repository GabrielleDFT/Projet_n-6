//----------------------------------- LOGIC APPLIED TO USER ROUTES -----------------------------------

//--Retrieve User model (with mongoose schema)
const User = require("../models/User");

//--bcrypt algorithm to hash Users password-- 
const bcrypt = require("bcrypt");

//--jsonwebtoken package to assign Token to User when he connects--
const jwt = require("jsonwebtoken");

 //--User Registration - Create, Save new user & encrypt password with hash generated by bcrypt
exports.signup = (req, res, next) => {

  //--Hash Password before send it to Database--
  bcrypt
      //--Salt = 10 => Number of times the hashing algorithm will be executed--
    .hash(req.body.password, 10)
    //--Retrieve password hash & Save it as new User in MongoDB Database--
    .then((hash) => {
      //--Create new User with Mongoose model--
      const user = new User({
        email: req.body.email,//--Pass email in body request--
        password: hash//--Retrieve hashed password from bcrypt--
      });

      //--User saved in MongoDB Database--
      user
        .save()
        .then(() => res.status(201).json({ message: "Utilisateur créé et sauvegardé" }))
        .catch((error) => res.status(400).json({ error }));
    })
    .catch((error) => res.status(500).json({ error }).send());
    next();
};

    //--User Login - Middleware checks if User exists in MongoDB Database when logging in--
exports.login = (req, res, next) => {
  //--Find User in Database which matches to email entered by User--
  User.findOne({ email: req.body.email })
    .then((user) => {
      //--If the user's not found, send a 401 code "no authorized"--
      if (!user) {
        return res.status(401).json({ error: "Utilisateur non trouvé" });
      }
      bcrypt
      //--Use bcrypt to compare hashes & know if they have same original string--
        .compare(req.body.password, user.password)
        .then((valid) => {
          //--If invalid Password--
          if (!valid) {
            return res.status(401).json({ error: "Mot de passe incorrect" });
          }
          //--If Valid Password--
          res.status(200).json({
            //Encodage du userId pour la création de nouveau objet(objet et userId seront liés)
            userId: user._id,
            token: jwt.sign({ userId: user._id }, "RANDOM_TOKEN_SECRET", 
            {
              expiresIn: "24h",
            }),
          });
        })
        
        .catch((error) => res.status(500).json({ error }));
    })
    .catch((error) => res.status(500).json({ error }));
};

